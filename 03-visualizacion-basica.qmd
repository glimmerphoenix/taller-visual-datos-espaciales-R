# Visualización básica

En este capítulo presentamos algunas herramientas básicas de visualización en R,
que se pueden aplicar a la creación de gráficos con datos espaciales.

### Datos de ejemplo

Utilizaremos un *dataset* de ejemplo del paquete R `agridat` [@agridat2024], 
que contiene conjuntos de datos provenientes de publicaciones relacionadas con la agricultura,
incluyendo cultivos de campo, cultivos arbóreos o estudios con animales, entre otros.

También usaremos un *dataset* de ejemplo de un completo libro sobre métodos de regresión,
ya en su segunda edición [@fahrmeir2022]. Los archivos con los datasets de ejemplo de esta
referencia se pueden descargar de su [página web](https://www.uni-goettingen.de/de/551625.html),
así como también los [archivos de código con los modelos](https://www.uni-goettingen.de/de/551585.html)
sobre estos datos, en R.

**Paquete `agridat`**

- `holland.arthropods`: Muestreo de diferentes especies de artrópodos presentes en una malla de 30m x 30m de un
campo de trigo cerca de Wimborne, Dorest (Reino Unido). Los muestreos se realizaron en 6 fechas entre junio/julio
de 1996. Los conteos para cada especie de artrópodo se agregaron sobre los 6 días totales [@holland1999].

```{r}
#| label: arthropods-eda
library(agridat)

data(holland.arthropods)
str(holland.arthropods)
```

***Dataset* `beech`**

De acuerdo con la información facilitada en [@fahrmeir2022], este *dataset* proviene de un proyecto
para comprobar las condiciones en que se encuentra el bosque the Rothenbuch (Spessart), realizado
por Axel Göttlein (Tech. Univ., Munich) desde 1982. En este caso, las localizaciones de los
árboles examinados están mucho más próximas entre sí de lo habitual en los análisis oficiales
a gran escala. Se examinaron árboles en 83 ubicaciones diferentes alrededor de la localidad,
centrándose en cinco especies: haya, roble, abeto, alerce y pino. El archivo de datos está restringido
a la información sobre las hayas. En concreto, cada año la salud de las hayas se categoriza mediante
la variable respuesta `defoliation` (defoliación), medida en 9 niveles diferentes. La interpretación
de los posibles valores es que 0% corresponde a un árbol sano y 100% se asigna a un arbol muerto.

::: {.callout-warning}
## Datos mal codificados

El archivo de datos `data/beech.raw` incluid en el repositorio de este taller,
es una copia del archivo original descargado de 
la [página web](https://www.uni-goettingen.de/de/551625.html) oficial del libro.
Sin embargo, dicho archivo original contiene 3 valores erróneamente codificados (aparece 
el valor `.`) para la columna de la variable `ph`, concretamente en las filas 
1678, 1679 y 1797.

Para evitar errores de lectura, se han recodificado esos tres valores como `4.` para
los ejemplos de este taller. No obstante, se notifica esta modificación a los
usuarios/as que estuviesen interesados en utilizar este *dataset* para otros fines (como
practicar modelos avanzados de regresión).
:::

```{r}
#| label: beech-data-describe
library(Hmisc)
library(readr)

beech <- read_table("data/beech.raw",
  col_types = cols(id = col_integer(), year = col_integer(), age = col_integer(),
                   canopyd = col_integer(), gradient = col_integer(),
                   alt = col_integer(), depth = col_integer(), ph = col_double(),
                   watermoisture = col_factor(levels = c("1", "2", "3")),
                   alkali = col_factor(levels = c("1","2", "3", "4")),
                   humus = col_factor(levels = c("0", "1", "2", "3", "4",
                                                 "5", "6", "7", "8", "9")),
                   type = col_factor(levels = c("0","1")),
                   fert = col_factor(levels = c("0","1"))
                   ))
str(beech)

# Para un resumen más completo:
# Hmisc::html(describe(beech))
```


## El paquete `ggplot2`

## Anatomía de un gráfico con `ggplot2`

El paquete `ggplot2` sigue los principios de la gramática de gráficos que hemos visto en el
@sec-grammar-of-graphics, de forma que nos permite construir un gráfico paso a paso. Para ello
se empieza por utilizar la función `ggplot()`:

1. Indicamos a la función `ggplot()` los datos que vamos a representar. [El argumento
`data = ...`.]{.aside}

2. Indicamos a `ggplot()` *qué* relaciones queremos visualizar. [El argumento `mapping = aes(...)`.]{.aside}

3. Elegimos *cómo* queremos representar gráficamente las relaciones en nuestros datos
que hemos indicado en el paso anterior. [Elegimos una función `geom_...()` que determina
el tipo de gráfico o elemento gráfico.]{.aside}

4. Si es necesario, superponemos más elementos gráficos (objetos geométricos o *geoms*), añadiéndolas a nuestro
gráfico una a una.

5. Incluimos funciones adicionales para ajustar transformar los datos, ajustar o cambiar escalas, 
añadir etiquetas y título, marcas en los ejes, capas adicionales, etc.

Veamos estós datos sobre un esquema para hacernos una idea más clara del aspecto que tendrá nuestro
código.

```r
ggplot(data = <DATOS>,                       # <1>
       mapping = aes(<CONEXIONES>)) +        # <1>
  geom_...(...) +                            # <2>
  stat_...(...) +                            # <3>
  <FUNCIONES DE ESCALA Y GUÍAS> +            # <4>
  <SISTEMAS COORDENADOS> +                   # <5>
  <FACETAS> +                                # <6>
  <TEMA>                                     # <7>
```
1. Indicamos qué datos vamos a utilizar y como conectamos esos datos (mapeo) con los elementos estéticos. Esta parte es **obligatoria**.
2. Añadimos uno o varios objetos geométricos para representar los datos.
3. Transformamos los datos (funciones `stat_...()`), normalmente resumiéndolos de algún modo. 
4. Ajustamos el mapeo de los datos a los elementos estéticos, modificando la escala de representación o añadiendo 
elementos de guía para intepretar el gráfico (marcas en ejes, leyenda, etc.).
5. Configuramos el sistema coordenado de representación (por defecto se usan coordenadas cartesianas): intercambio de ejes X e Y
(función `coord_flip()`), uso de coordenadas polares (`coord_polar()`), etc.
6. Decidimos si queremos desglosar el gráfico en varios paneles (*facets*) para presentar simultáneamente varios subgráficos
(como hemos visto, útil para comparar entre grupos, evolución temporal y en otros casos).
7. Por último, podemos elegir un tema preconfigurado que adapta el aspecto de muchos de los elementos del gráfico para conseguir
un resultado final más armonizado.

::: {.callout-note collapse="true"}
## Información adicional sobre `ggplot2`

Si necesitas más información sobre la utilización del paquete `ggplot2` te recomendamos que consultes
las siguientes referencias:

- [Capítulo 5](https://www.uni-goettingen.de/de/551625.html) de nuestro curso previo
    *Visualización de Datos con R*, para este mismo programa de doctorado.
- Manual oficial de `ggplot2`: <https://ggplot2-book.org> (3ª ed., en progreso).
:::

## Taller práctico 1: visualización de datos espaciales con `ggplot2`

Vamos a utilizar el dataset `beech`, con datos sobre el estado de salud de las hayas cerca
de la localidad alemana de Rothenbuch (Spessart), para componer otros ejemplos de
construcción de gráficos para visualización de datos paso a paso con `ggplot2`.

```{r}
#| label: fig-beech-2ch
#| fig-cap: "Visualización utilizando dos canales y facetas."
#| fig-height: 12
#| fig-width: 15
#| column: page-right
library(ggplot2)

beech_years <- beech |>
               dplyr::filter(year == 1983 | year == 1987 |
                      year == 1991 | year == 1995 |
                      year == 1999 | year == 2004)

p_beech <- ggplot(data = beech_years,
                  aes(x = x, y = y,
                      color = defol, size = age)) +
           geom_point(alpha = 0.6) +
           facet_wrap(~year, nrow = 3) +
           theme(
            legend.text = element_text(size = 12),
            legend.title = element_text(size = 14),
            strip.text = element_text(size = 12),
            axis.text = element_text(size = 12),
            axis.title = element_text(size = 14),
            
           )
p_beech
```


```{r}
#| label: fig-beech-3ch
#| fig-cap: "Visualización utilizando tres canales y facetas."
#| fig-height: 12
#| fig-width: 15
#| column: page-right

p_beech <- ggplot(data = beech_years,
                  aes(x = x, y = y,
                      color = defol, size = age)) +
           geom_point(aes(shape = alkali), alpha = 0.6) +
           facet_wrap(~year, nrow = 3) +
           theme(
            legend.text = element_text(size = 12),
            legend.title = element_text(size = 14),
            strip.text = element_text(size = 12),
            axis.text = element_text(size = 12),
            axis.title = element_text(size = 14)
           )
p_beech
```
